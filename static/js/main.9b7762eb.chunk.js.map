{"version":3,"sources":["components/map.js","App.js","serviceWorker.js","index.js"],"names":["WebMapView","props","mapRef","React","createRef","state","map","console","log","loadModules","then","FeatureLayer","data","active","layers","removeAll","i","length","newlayer","url","add","css","ArcGISMap","MapView","Search","basemap","view","container","current","center","zoom","fires","floods","quakes","search","ui","this","destroy","className","ref","Component","App","name","toggled","bind","e","id","currentTarget","dataArr","setState","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wSAGaA,EAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,OAASC,IAAMC,YACpB,EAAKC,MAAQ,CACXC,IAAK,MAJU,EADrB,wEAc6B,IAAD,OAC5BC,QAAQC,IAAI,8EACRC,sBAAY,CAAC,6BACVC,MAAK,YAAmB,IAAjBC,EAAgB,oBACtBJ,QAAQC,IAAI,EAAKP,MAAMW,KAAK,GAAGC,OAAO,EAAKZ,MAAMW,KAAK,GAAGC,OAAO,EAAKZ,MAAMW,KAAK,GAAGC,QAEnF,IAAIC,EAAS,EAAKR,IAAIQ,OACtBA,EAAOC,YACPR,QAAQC,IAAI,SAASM,GAErBP,QAAQC,IAAI,EAAKF,KAEjB,IAAI,IAAIU,EAAI,EAAGA,EAAI,EAAKf,MAAMW,KAAKK,OAAQD,IACzC,IAAiC,IAA9B,EAAKf,MAAMW,KAAKI,GAAGH,OAAgB,CAEpC,IAAIK,EAAW,IAAIP,EAAa,CAC9BQ,IAAK,EAAKlB,MAAMW,KAAKI,GAAGG,MAG1B,EAAKb,IAAIc,IAAIF,SAjCzB,0CA6CuB,IAAD,OAGlBT,sBAAY,CAAC,WAAY,qBAAqB,sBAAsB,4BAA6B,CAAEY,KAAK,IACvGX,MAAK,YAAiD,IAAD,mBAA9CY,EAA8C,KAAnCC,EAAmC,KAA1BC,EAA0B,KAAlBb,EAAkB,KAE9CL,EAAM,IAAIgB,EAAU,CACxBG,QAAS,SAGX,EAAKC,KAAO,IAAIH,EAAQ,CACtBI,UAAW,EAAKzB,OAAO0B,QACvBtB,IAAKA,EACLuB,OAAQ,EAAE,IAAK,IACfC,KAAM,IAIR,IAAIC,EAAQ,IAAIpB,EAAa,CAC3BQ,IAAK,EAAKlB,MAAMW,KAAK,GAAGO,MAEtBb,EAAIc,IAAIW,GAEZ,IAAIC,EAAS,IAAIrB,EAAa,CAC5BQ,IAAI,EAAKlB,MAAMW,KAAK,GAAGO,MAErBb,EAAIc,IAAIY,GAGZ,IAAIC,EAAS,IAAItB,EAAa,CAC5BQ,IAAK,EAAKlB,MAAMW,KAAK,GAAGO,MAEtBb,EAAIc,IAAIa,GAElB,IAAIC,EAAS,IAAIV,EAAO,CAChBE,KAAM,EAAKA,OAGb,EAAKA,KAAKS,GAAGf,IAAIc,EAAQ,aACzB,EAAK5B,IAAMA,EACXC,QAAQC,IAAI,EAAKF,UArFvB,6CA6FQ8B,KAAKV,MAEPU,KAAKV,KAAKW,YA/FhB,+BAoGoBD,KAAKnC,MACrB,OACE,yBAAKqC,UAAU,SAASC,IAAKH,KAAKlC,aAtGxC,GAAgCC,IAAMqC,W,eCIjBC,E,kDACnB,WAAYxC,GAAO,IAAD,8BAChB,cAAMA,IACDI,MAAM,CACTO,KAAK,CACL,CACE8B,KAAM,OACNvB,IAAK,oGACLN,QAAQ,GAEV,CACE6B,KAAM,QACNvB,IAAK,mHACLN,QAAQ,GAEV,CACE6B,KAAM,QACNvB,IAAK,8GACLN,QAAQ,KAIZ,EAAK8B,QAAU,EAAKA,QAAQC,KAAb,gBArBC,E,oDAwBVC,GAIN,IAHA,IAAIC,EAAKD,EAAEE,cAAcD,GACrBE,EAAO,YAAOZ,KAAK/B,MAAMO,MAErBI,EAAI,EAAGA,EAAGgC,EAAQ/B,OAAQD,IAC5BgC,EAAQhC,GAAG0B,OAASI,IACpBE,EAAQhC,GAAGH,QAAUmC,EAAQhC,GAAGH,QAEpCuB,KAAKa,SAAS,CAACrC,KAAKoC,M,+BAQtB,OACE,yBAAKV,UAAU,OACf,4BAAQA,UAAU,cAAlB,KAIF,yBAAKA,UAAU,YACT,yBAAKA,UAAU,OACf,wBAAIA,UAAU,cACZ,wBAAIQ,GAAG,QAAQI,QAASd,KAAKO,QAASL,UAAU,cAAa,kBAAC,IAAD,OAC7D,wBAAIQ,GAAG,QAAQI,QAASd,KAAKO,QAASL,UAAU,cAAa,kBAAC,IAAD,OAC7D,wBAAIQ,GAAG,OAAQI,QAASd,KAAKO,QAASL,UAAU,cAAa,kBAAC,IAAD,SAK7D,yBAAKA,UAAU,oBACb,kBAAC,EAAD,CAAY1B,KAAMwB,KAAK/B,MAAMO,c,GA1DV4B,aCKbW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5D,QAAQ4D,MAAMA,EAAMC,c","file":"static/js/main.9b7762eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { loadModules } from 'esri-loader';\r\n\r\nexport class WebMapView extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.mapRef = React.createRef();\r\n    this.state = {\r\n      map: null,\r\n    }\r\n  }\r\n  \r\n\r\n  /*\r\n    when user toggles a layer on and off, compare the new state of the props and if the props are inactive\r\n    remove the layer from this.maps, if the prop has become active, add a new layer to maps with that props url\r\n  */\r\n componentWillReceiveProps(){\r\nconsole.log(\"if a prop has active set to true, this.map will add a layer using prop url\")\r\n    loadModules([\"esri/layers/FeatureLayer\"])\r\n      .then(([FeatureLayer])=>{\r\n        console.log(this.props.data[0].active,this.props.data[1].active,this.props.data[2].active)\r\n\r\n        var layers = this.map.layers\r\n        layers.removeAll()\r\n        console.log(\"layers\",layers) \r\n        \r\n        console.log(this.map) //layers seem to be added but the map isn't changing\r\n\r\n        for(let i = 0; i < this.props.data.length; i++){\r\n          if(this.props.data[i].active === true){\r\n\r\n            var newlayer = new FeatureLayer({\r\n              url: this.props.data[i].url\r\n            })\r\n            \r\n            this.map.add(newlayer)\r\n          }\r\n        }\r\n\r\n  \r\n    })\r\n \r\n }\r\n\r\n\r\n  \r\n \r\n  componentDidMount() {\r\n\r\n    // lazy load the required ArcGIS API for JavaScript modules and CSS\r\n    loadModules(['esri/Map', 'esri/views/MapView',\"esri/widgets/Search\",\"esri/layers/FeatureLayer\"], { css: true })\r\n    .then(([ArcGISMap, MapView, Search, FeatureLayer]) => {\r\n\r\n      const map = new ArcGISMap({\r\n        basemap: 'topo'\r\n      });\r\n\r\n      this.view = new MapView({\r\n        container: this.mapRef.current,\r\n        map: map,\r\n        center: [-118, 34],\r\n        zoom: 5\r\n      });\r\n\r\n      \r\n      var fires = new FeatureLayer({\r\n        url: this.props.data[0].url\r\n      });\r\n          map.add(fires);\r\n\r\n      var floods = new FeatureLayer({\r\n        url:this.props.data[1].url\r\n      })\r\n          map.add(floods);\r\n    \r\n\r\n      var quakes = new FeatureLayer({\r\n        url: this.props.data[2].url\r\n      })\r\n          map.add(quakes)\r\n\r\nvar search = new Search({\r\n        view: this.view\r\n      });\r\n\r\n      this.view.ui.add(search, \"top-right\");\r\n      this.map = map\r\n      console.log(this.map)\r\n\r\n    });\r\n  }\r\n\r\n\r\n\r\n  componentWillUnmount() {\r\n    if (this.view) {\r\n      // destroy the map view\r\n      this.view.destroy();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var prevProps = this.props\r\n    return (\r\n      <div className=\"webmap\" ref={this.mapRef} />\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport {WebMapView} from './components/map.js'\nimport { RiEarthquakeLine } from 'react-icons/ri';\nimport { RiFloodLine } from 'react-icons/ri';\nimport { AiOutlineFire } from 'react-icons/ai';\n\nexport default class App extends Component {\n  constructor(props){\n    super(props)\n    this.state={\n      data:[\n      {\n        name: 'fire',\n        url: \"https://services9.arcgis.com/RHVPKKiFTONKtxq3/arcgis/rest/services/USA_Wildfires_v1/FeatureServer\",\n        active: true\n      },\n      {\n        name: 'flood',\n        url: \"https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/USA_Flood_Hazard_Reduced_Set_gdb/FeatureServer\",\n        active: true,\n      },\n      {\n        name: 'quake',\n        url: \"https://services1.arcgis.com/VAI453sU9tG9rSmh/arcgis/rest/services/Major_Earthquakes_features/FeatureServer\",\n        active: true\n      }\n    ]\n  }\n    this.toggled = this.toggled.bind(this)\n  }\n\n  toggled(e){\n    let id = e.currentTarget.id\n    let dataArr = [...this.state.data];\n\n    for(let i = 0; i< dataArr.length; i++){\n      if (dataArr[i].name === id){\n          dataArr[i].active = !dataArr[i].active\n      }\n      this.setState({data:dataArr})\n    }\n    \n  }\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\"> </header>\n\n  \n\n    <div className=\"leftMenu\">\n          <div className=\"nav\">\n          <ul className=\"toggleopts\">\n            <li id=\"quake\" onClick={this.toggled} className=\"toggleicon\"><RiEarthquakeLine /></li>\n            <li id=\"flood\" onClick={this.toggled} className=\"toggleicon\"><RiFloodLine/></li>\n            <li id=\"fire\"  onClick={this.toggled} className=\"toggleicon\"><AiOutlineFire/></li>\n          </ul>\n          </div>  \n\n\n            <div className=\"EsriMapContainer\">\n              <WebMapView data={this.state.data} />\n            </div>\n      </div>\n\n     \n      \n    </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}